#!/usr/bin/env python
# Copyright (C) 2008-2010 AG Projects. See LICENSE for details.
#

import base64
import httplib
import os
import random
import string
import sys
import urllib2

from cStringIO import StringIO
from optparse import OptionParser
from urllib2 import URLError

from lxml import etree
from xcaplib.client import XCAPClient
from xcaplib.error import HTTPError

from sipsimple.account import Account, AccountManager, BonjourAccount
from sipsimple.configuration import ConfigurationError, ConfigurationManager
from sipsimple.configuration.backend.file import FileBackend
from sipsimple.configuration.settings import SIPSimpleSettings
from sipsimple.payloads.icon import Icon, Data

from sipclient.configuration import config_filename
from sipclient.configuration.account import AccountExtension
from sipclient.configuration.settings import SIPSimpleSettingsExtension

try:
    import Image
except ImportError:
    print "You need the Python Image Library. You can install it by doing easy_install PIL"
    sys.exit(1)


xcap_client = None
filename = None

def _download_icon(url):
    global icon_count
    if url:
        try:
            data = urllib2.urlopen(url).read()
        except (URLError, HTTPError), e:
            raise RuntimeError("Cannot download icon: %s" % str(e))
        else:
            filename = "icon_" + url.split("/")[-1]
            if os.path.isfile(filename):
                count = 0
                while True:
                    file, ext = os.path.splitext(filename)
                    if not os.path.isfile("%s_%s%s" % (file, count, ext)):
                        filename = "%s_%s%s" % (file, count, ext)
                        break
                    count += 1
            try:
                f = open(filename, "w")
                f.write(data)
                f.close()
                print "\tFile saved to: %s" % filename
            except IOError, e:
                raise RuntimeError("Cannot write icon: %s" % str(e))

def _do_icon_get(filename):
    global xcap_client
    try:
        res = xcap_client.get("org.openmobilealliance.xcap-directory", node='/xcap-directory/folder[@auid="oma_status-icon"]')
    except URLError, e:
        raise RuntimeError("Cannot GET icon: %s" % str(e))
    except HTTPError, e:
        raise RuntimeError("Cannot GET icon: %s %s" % (e.response.status, e.response.reason))

    try:
        xml = StringIO(res)
        tree = etree.parse(xml)
        root = tree.getroot()
    except etree.ParseError, e:
        raise RuntimeError("Cannot download icon: %s" % str(e))
    else:
        print "Icons:"
        for element in root:
            print "\t%s" % element.get("uri")
            if filename == element.get("uri").split('/')[-1]:
                _download_icon(element.get("uri"))

def _do_icon_put(file):
    global xcap_client
    try:
        format = os.path.splitext(file)[1][1:]
        new_filename = "".join(random.sample(string.letters+string.digits, 20))+'.'+format
        img = Image.open(file)
        img = img.resize((256, 256), Image.BICUBIC)
        out = StringIO()
        img.save(out, format=format)
        icon = Icon(data=Data(base64.encodestring(out.getvalue())))
        kwargs = {'filename': new_filename}
        res = xcap_client.put("oma_status-icon", icon.toxml(), headers={'Content-Type': "application/vnd.oma.pres-content+xml"}, **kwargs)
    except (URLError, IOError, httplib.BadStatusLine), e:
        raise RuntimeError("Cannot PUT icon: %s" % str(e))
    except HTTPError, e:
        raise RuntimeError("Cannot PUT icon: %s %s \n%s" % (e.response.status, e.response.reason, e))
    else:
        print "Icon uploaded successfully"
        print res

def _do_icon_delete(filename):
    global xcap_client
    if not filename:
        raise RuntimeError("You need to specify the filename to delete.")

    try:
        kwargs = {'filename': filename}
        res = xcap_client.delete("oma_status-icon", **kwargs)
    except URLError, e:
        raise RuntimeError("Cannot GET icon: %s" % str(e))
    except HTTPError, e:
        raise RuntimeError("Cannot GET icon: %s %s" % (e.response.status, e.response.reason))
    else:
        print res


def do_xcap_icon(operation, account_name, file):
    global xcap_client

    Account.register_extension(AccountExtension)
    BonjourAccount.register_extension(AccountExtension)
    SIPSimpleSettings.register_extension(SIPSimpleSettingsExtension)
    try:
        ConfigurationManager().start(FileBackend(config_filename))
    except ConfigurationError, e:
        raise RuntimeError("failed to load sipclient's configuration: %s\nIf an old configuration file is in place, delete it or move it and recreate the configuration using the sip_settings script." % str(e))
    account_manager = AccountManager()
    account_manager.load_accounts()

    if account_name is None:
        account = account_manager.default_account
    else:
        possible_accounts = [account for account in account_manager.iter_accounts() if account_name in account.id and account.enabled]
        if len(possible_accounts) > 1:
            raise RuntimeError("More than one account exists which matches %s: %s" % (account_name, ", ".join(sorted(account.id for account in possible_accounts))))
        if len(possible_accounts) == 0:
            raise RuntimeError("No enabled account that matches %s was found. Available and enabled accounts: %s" % (account_name, ", ".join(sorted(account.id for account in account_manager.get_accounts() if account.enabled))))
        account = possible_accounts[0]
    if account is None:
        raise RuntimeError("Unknown account %s. Available accounts: %s" % (account_name, ', '.join(account.id for account in account_manager.iter_accounts())))
    elif not account.enabled:
        raise RuntimeError("Account %s is not enabled" % account.id)
    elif account == BonjourAccount():
        raise RuntimeError("Cannot use bonjour account for XCAP icon management")
    elif not account.xcap.enabled:
        raise RuntimeError("XCAP is not enabled for account %s" % account.id)
    elif account.xcap.xcap_root is None:
        raise RuntimeError("XCAP root is not defined for account %s" % account.id)

    xcap_client = XCAPClient(account.xcap.xcap_root, account.id, password=account.auth.password, auth=None)
    if operation == "GET":
        _do_icon_get(file)
    elif operation == "PUT":
        _do_icon_put(file)
    else:
        _do_icon_delete(file)


if __name__ == "__main__":
    description = "This script downloads or uploads the specified icon file on the XCAP server for the given SIP account."
    usage = "%prog [options] GET|PUT|DELETE"
    parser = OptionParser(usage=usage, description=description)
    parser.print_usage = parser.print_help
    parser.add_option("-a", "--account-name", type="string", dest="account_name", help="The name of the account to use.")
    parser.add_option("-f", "--filename", type="string", dest="filename", help="In case of PUT it indicates the icon that is going to be uploaded. In case of DELETE it indicates the icon to be deleted. In case of GET it indicates the icon to be downloaded, and if not present all icons will be listed.")
    options, args = parser.parse_args()

    if not args or args[0].upper() not in ('GET', 'PUT', 'DELETE'):
        print "You need to specify the operation: GET, PUT or DELETE"
        sys.exit(1)

    operation = args[0].upper()
    if (options.filename is None or not os.path.isfile(options.filename)) and operation == 'PUT':
        print "You need to specify an input filename for doing a PUT."
        sys.exit(1)

    try:
        do_xcap_icon(operation, options.account_name, options.filename)
    except RuntimeError, e:
        print "Error: %s" % str(e)
        sys.exit(1)
    else:
        sys.exit(0)

